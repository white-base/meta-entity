/* eslint-disable */
export default {
  "EL02200": "---- Interface.* ----",
  "EL02210": "---- i-control-export.js ----",
  "EL02211": "write(opt): object is an abstract method. '$1' must be implemented",
  "EL02220": "---- i-control-import.js ----",
  "EL02221": "read(object) is an abstract method. '$1' must be implemented",
  "EL02230": "---- i-control-group.js ----",
  "EL02231": "merge(any, opt) is an abstract method. '$1' must be implemented,",
  "EL02232": "Copy(filter) is an abstract method. '$1' must be implemented,",
  "EL02240": "---- i-control-schema.js ----",
  "EL02241": "readSchema(json) is an abstract method. '$1' must be implemented",
  "EL02242": "writeSchema(opt): object is an abstract method. '$1' must be implemented",
  "EL02250": "---- i-transaction.js ----",
  "EL02251": "AcceptChanges() is an abstract method. '$1' must be implemented",
  "EL02252": "rejectChanges() is an abstract method. '$1' must be implemented",
  "EL05100": "---- Meta.Entity.* ----",
  "EL05110": "---- BaseColumn ----",
  "EL05111": "$1._entity value is not an instance of [MetaElement]",
  "EL05112": "$1.columnName is of type 'string'. typeof columnName = '$2'",
  "EL05113": "Existing $1.columnName'$2'",
  "EL05114": "Could not set columnName because $1.alias '$2' already exists",
  "EL05115": "$1.alias is of type 'string'. typeofalias = '$2'",
  "EL05116": "Existing $1.alias '$2'",
  "EL05117": "$1.caption is of type 'string'. typeofcaption = '$2'",
  "EL05118": "setObject(oGuid, origin); oGuid.['_entity'] guid not found. name = '$1', guid = '$2'",
  "EL05119": "clone() is an abstract method. It must be inherited and implemented.",
  "EL05120": "---- ObjectColumn ----",
  "EL05121": "_load(prop); prop is of type 'object', type of prop = '$2'",
  "EL05122": "setObject(oGuid, origin); oGuid.['default'] guid not found: guid = '$1'",
  "EL05123": "setObject(oGuid, origin); oGuid.['value'] guid not found: guid = '$1'",
  "EL05130": "---- MetaColumn ----",
  "EL05131": "$1.required is of type 'boolean', type of = '$2'",
  "EL05132": "$1.isNullPass is of type 'boolean'. typeofisNullPass = '$2' TODO: removed",
  "EL05133": "The array element of $1.constraits is of type 'function' | {regex: RegExp, msg: string}. typeof [$2].regex = '$3', [$2].msg = '$4'",
  "EL05134": "$1.getter is of type 'function', type of getter = '$2'",
  "EL05135": "$1.setter is of type 'function', type of setter = '$2'",
  "EL05136": "addConstraint (regex, msg, code, condition); regex is not a RegExp instance",
  "EL05137": "addConstraint(regex, msg, code, condition); msg 는 'string' 타입입니다. typeof msg = '$1'",
  "EL05138": "valid(value); value is a required value. columnName = '$1' ",
  "EL05139": "valid(value); function constraint failed. columnName = '$1' ",
  "EL0513A": "valid(value); regular expression constraint failed. Column name = '$1', msg = '$2'",
  "EL05140": "---- BaseColumnCollection ----",
  "EL05141": "$1._baseType is of type 'function', type of getter = '$2'",
  "EL05142": "The prototype of $1._baseType [BaseColumn] must be connected (inheritance), ",
  "EL05143": "add(name, vlaue); cannot add columnColleciton because _onwer rows exist. _onwer.rows.count = '$1'",
  "EL05144": "add(name, vlaue); cannot be added because '$2' exists in '$1'",
  "EL05145": "add(name, vlaue); cannot be added because alias '$2' exists in '$1'",
  "EL05146": "removeAt(idx); cannot remove columnColleciton because _onwer rows exist. _onwer.rows.count = '$1'",
  "EL05147": "addValue(name, value) is an abstract method. Must be implemented",
  "EL05148": "Column collection cannot use setter property. Add(), remove() method must be used TODO: removed",
  "EL05150": "---- MetaTableColumnCollection ----",
  "EL05151": "add(any); any 는 'string' | [BaseColumn] 타입입니다. typeof any = '$1'",
  "EL05152": "addValue(name, value); name 은 'string' 타입입니다. typeof name = '$1'",
  "EL05160": "---- MetaViewColumnCollection ----",
  "EL05161": "add(any, refCol); refCol value is not of type [BaseColumnCollection",
  "EL05162": "add(any, refCol); any 는 'string' | [BaseColumn] 타입입니다. typeof any = '$1'",
  "EL05163": "addValue(name, value, refCol); name 은 'string' 타입입니다. typeof name = '$1'",
  "EL05164": "addEntity(entity); entity value is not of type [BaseEntity",
  "EL05200": "",
  "EL05210": "---- MetaRow ----",
  "EL05211": "$1.constructor(entity) value is not of type [BaseEntity",
  "EL05212": "setObject(oGuid, origin); oGuid['_elem'].length = '$1' length and oGuid['_key'].length = '$2' length are different.",
  "EL05213": "setObject(oGuid, origin); oGuid['_elem']['$1'] guid not found. guid = '$2'",
  "EL05214": "changeKey(oldKey, newKey); parameter '$1' is not of type 'string'",
  "EL05215": "changeKey(oldKey, newKey); existing key does not exist. '$1'",
  "EL05216": "changeKey(oldKey, newKey); the key to be replaced overlaps with the existing key.'$1'",
  "EL05220": "---- MetaRowCollection ----",
  "EL05221": "The target's _entity object and $1._onwer object must be the same",
  "EL05222": "insertAt(pos, row, isCheck); row is not type [MetaRow]",
  "EL05223": "insertAt(pos, row, isCheck); row's _entity object and $1._onwer object must be the same",
  "EL05224": "Validation of insertAt(pos, row, isCheck);row['$1'] failed msg = '$2'",
  "EL05300": "---- base-entity.js ----",
  "EL05310": "---- property ----",
  "EL05311": "$1._mestaset value is not of type [MetaSet]",
  "EL05312": "The $1.column property must be redefined,",
  "EL05320": "---- private method :: _buildEntity, _readEntity, _readSchema - 14 ----",
  "EL05321": "_buildEntity(entity, cb, items); items['$1'] 가 'string' It's not type. typeof items['$1'] = '$2'",
  "EL05322": "_buildEntity(entity, cb, items); column name '$1' exists in this.column and cannot be added.",
  "EL05323": "_buildEntity (entity, cb, items); row creation for entity failed",
  "EL05324": "_readEntity(entity, opt); entity is not of type [BaseEntity",
  "EL05325": "_readEntity(entity, opt); opt is not of type 'number'. type of opt = '$1'",
  "EL05326": "_readEntity(entity, opt); entity read failed. opt = '$1'",
  "EL05327": "_readEntity(entity, opt); this.rows exists and cannot load column.opt = '$1'",
  "EL05328": "_readEntity(entity, opt); column name '$1' exists in this.column and cannot be added",
  "EL05329": "_readSchema(obj, isRow, origin); obj._baseEntity guid not found. guid = '$1'",
  "EL0532A": "_readSchema (obj, isRow, origin); Schema read failed",
  "EL0532B": "_readSchema(obj, isRow, origin); this.rows exists and cannot be added to column",
  "EL0532C": "_readSchema(obj, isRow, origin); this.columns['$1'] guid not found.guid = '$2'",
  "EL0532D": "_readSchema(obj, isRow, origin); this.columns['$1']._entity guid를 not found. guid = '$2'",
  "EL0532E": "_readSchema(obj, isRow, origin); column name '$1' exists in this.column and cannot be added",
  "EL05330": "---- method :: transformSchema(static), setValue, clone, select - 7, : getValue, clear, reset, newRow, getObject, setObject ----",
  "EL05331": "BaseEntity.transformSchema(oGuid); oGuid is not a schema object. oGuid = {column: $1,rows: $2}",
  "EL05332": "BaseEntity.transformSchema(oGuid); schema conversion failed",
  "EL05333": "setValue(row);row is not of type [MetaRow",
  "EL05334": "Row setting failed for setValue(row); columns",
  "EL05335": "select (filter, ...); recited from MetaRegistry.namespace to fetch '$1'",
  "EL05336": "select(filter, ...); lookup failed",
  "EL05337": "clone() is an abstract method. Must be implemented",
  "EL05338": "validate(); validation can be performed if all columns are MetaColumn type.",
  "EL05340": "---- merge, copy - 8 ----",
  "EL05341": "merge(target, opt, isMath); target is not of type [BaseEntity]",
  "EL05342": "merge(target, opt, isMath); opt is not of type 'number'. type of opt = '$1'",
  "EL05343": "merge(target, opt, isMath); opt = 1, target.columns['$1'].name = '$2' 이 column name 에 존재합니다.",
  "EL05344": "merge(target, opt, isMath); opt = 1, target.columns['$1'].name = '$2' 이 column alias 에 존재합니다.",
  "EL05345": "merge(target, opt, isMath); opt = 3, target.columns['$1'].name = '$2' 이 columns name 에 존재합니다.",
  "EL05346": "merge(target, opt, isMath); opt = 3, target.columns['$1'].name = '$2' 이 columns alias 에 존재합니다.",
  "EL05347": "merge(target, opt, isMath); merge failed. opt = '$1'",
  "EL05348": "copy() is an abstract method. must be implemented",
  "EL05350": "---- load, read, readSchema, readDate - 12 ----",
  "EL05351": "load(obj, pas); type [BaseEntity] obj cannot be loaded",
  "EL05352": "load(obj, pas); obj is not of type 'object' (except null) type of obj = '$1'",
  "EL05353": "load(obj, pas); load failed",
  "EL05354": "read(obj, opt); obj is not of type 'object' (except null) type of obj = '$1'",
  "EL05355": "read(obj, opt); opt is not of type 'number'. type of opt = '$1'",
  "EL05356": "read(obj, opt); opt values are not in the range (1-3). obj = '$1'",
  "EL05357": "read(obj, opt); read failed",
  "EL05358": "readSchema(obj, isCreate, origin); obj is not of type 'object' (except null) type of obj = '$1'",
  "EL05359": "readSchema(obj, isCreate, origin); obj is not a schema object. obj = {column: $1,rows: $2}",
  "EL0535A": "readSchema (obj, isCreate, origin); skami read failed",
  "EL0535B": "readData(obj); obj is not of type 'object' (except null) type of obj = '$1'",
  "EL0535C": "readData(obj); obj is not a schema object. obj = {columns: $1,rows: $2}",
  "EL0535D": "readData(obj); data read failed",
  "EL05360": "---- output, write, writeSchema, writeData - 4 ----",
  "EL05361": "",
  "EL05400": "",
  "EL05410": "---- MetaTable ----",
  "EL05411": "$1.tableName value is not of type 'string'. typeoftableName = '$2'",
  "EL05412": "$1.column value is not of type [MetaTableCollection]",
  "EL05413": "$1.rows exists and cannot set columns.rows.count = '$2'",
  "EL05414": "setObject(oGuid, origin); oGuid.['_metaSet'] guid not found: guid = '$1'",
  "EL05420": "---- MetaTableColleciton ----",
  "EL05421": "$1._baseType value is not function type. typeof_baseType = '$2'",
  "EL05422": "The prototype of $1._baseType [MetaTable] must be connected. (Inheritance)",
  "EL05423": "add(any); any is 'string' | [MetaTable] type. typeofany = '$1'",
  "EL05424": "add(any); tableName = '$1' existing",
  "EL05430": "---- MetaView ----",
  "EL05431": "$1.viewName value is not of type 'string'. typeofviewName = '$2'",
  "EL05432": "$1.column value is not of type [MetaViewCollection]",
  "EL05433": "$1.rows exists and cannot set columns.rows.count = '$2'",
  "EL05434": "$1._baseEntity value is not of type [BaseEntity]",
  "EL05435": "setObject(oGuid, origin); oGuid.['_metaSet'] guid not found: guid = '$1'",
  "EL05436": "setObject(oGuid, origin); oGuid.['_baseEntivity'] guid not found: guid = '$1'",
  "EL05440": "---- MetaViewColleciton ----",
  "EL05441": "$1._baseType value is not of type 'function'. typeof_baseType = '$2'",
  "EL05442": "The prototype of $1._baseType [MetaView] must be connected (inheritance), ",
  "EL05443": "You cannot enter obj and baseEntity of type [MetaView] at the same time",
  "EL05444": "add(obj, baseEntity); baseEntity is not type [BaseEntity]",
  "EL05445": "add(obj, baseEntity); obj is 'string' | [MetaView] type. typeof obj = '$1'",
  "EL05446": "add(obj, baseEntity); viewName = '$1' existing",
  "EL05450": "---- MetaSet ----",
  "EL05451": "$1.setName value is not of type 'string'. typeofsetName = '$2'",
  "EL05452": "$1.autoChanges value is not of type 'boolean'. typeofsetName = '$2'",
  "EL05453": "MetaSet.transformSchema(oGuid); oGuid is not a schema object: oGuid = {tables:..., views:...}",
  "EL05454": "load(obj, pas); type [MetaSet] obj cannot be loaded",
  "EL05455": "load(obj, pas); obj is not of type 'object' (except null) type of obj = '$1'",
  "EL05456": "read(obj, opt); obj is not of type 'object' (except null) type of obj = '$1'",
  "EL05457": "read(obj, opt); opt is not of type 'number'. type of opt = '$1'",
  "EL05458": "readSchema(obj, isCreate); obj is not of type 'object' (except null) type of obj = '$1'",
  "EL05459": "readSchema(obj, isCreate); obj is not a schema object. obj = {tables: $1, views: $2}",
  "EL0545A": "readData(obj); obj is not of type 'object' (except null) type of obj = '$1'",
  "EL0545B": "readData(obj); obj is not a schema object."
}